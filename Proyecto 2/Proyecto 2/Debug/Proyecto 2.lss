
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000890  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001203  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df0  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000691  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 01 	call	0x372	; 0x372 <main>
  9e:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
// Funciones ADC
//////////////////////////////////////////////////////

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	ADCSRA |= (0b00000100); //Prescaler de 16
  ce:	80 81       	ld	r24, Z
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <setup>:

uint8_t ADCChannel = 6; //Canal ADC seleccionado

void setup(void)
{
	cli();
  d6:	f8 94       	cli
	
	// Control prescaler
	CLKPR = (0b10000000); // habilitamos cambios del prescale
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
	CLKPR = (0x03); // Colocamos prescaler de 8
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24

	//Inicializamos botones (C0 - C3 para control de EEPROM)
	PCICR = (0b00000011);
  e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11); //Interrupts en C0 - C3
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	PCMSK0 = (1<<PCINT5);
  ee:	90 e2       	ldi	r25, 0x20	; 32
  f0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PORTC = (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3); //Pullup
  f4:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1<<PORTB5);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	85 b9       	out	0x05, r24	; 5
	DDRC = 0;
  fc:	17 b8       	out	0x07, r1	; 7

	// Inicializacion PWM
	initPWM0FastA(reset, no_invertido, 256); // Activamos timer 0 en modo pwm, utilizando OCR0A y OCR0B
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	51 e0       	ldi	r21, 0x01	; 1
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 50 02 	call	0x4a0	; 0x4a0 <initPWM0FastA>
	initPWM0FastB(no_reset, no_invertido, 256);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	51 e0       	ldi	r21, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 8d 02 	call	0x51a	; 0x51a <initPWM0FastB>
	initPWM2FastA(reset, no_invertido, 128);
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 ca 02 	call	0x594	; 0x594 <initPWM2FastA>
	initPWM2FastB(no_reset, no_invertido, 128);
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 2c 03 	call	0x658	; 0x658 <initPWM2FastB>
	
	//Inicializamos Timer2 para debounce y "PWM"
	TCCR1A = 0;
 12e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00000001; //Prescaler 256
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 0x01; //Overflow interrupt
 138:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCNT1 = 0xFFFF - timer2reset; 
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 144:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	DDRD |= 0b10010100; // D2 y D4 - luces mostrando eeprom seleccionado
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	84 69       	ori	r24, 0x94	; 148
 14c:	8a b9       	out	0x0a, r24	; 10
	//D7 - luz mostrando que se esta desplegando luz */
	
	initADC();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <convertADC>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000100); //Prescaler de 16
}

void convertADC(char channel) //Funcion para leer info ADC
{	ADMUX &= ~(0x0F); // Borramos los ultimos 4 bits de ADMUX
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	90 7f       	andi	r25, 0xF0	; 240
 15e:	90 83       	st	Z, r25
	
	if (channel > 8) {channel = 8;} //valor maximo es 8
 160:	89 30       	cpi	r24, 0x09	; 9
 162:	08 f0       	brcs	.+2      	; 0x166 <convertADC+0x10>
 164:	88 e0       	ldi	r24, 0x08	; 8
	
	if (channel < 6) {DIDR0 = channel;}
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	10 f4       	brcc	.+4      	; 0x16e <convertADC+0x18>
 16a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	ADMUX |= channel; // seleccionamos el canal correcto
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	89 2b       	or	r24, r25
 176:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // iniciamos el ADC
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <__vector_13>:
	
	return;
}

// ISR de timer2 para debounce
ISR(TIMER1_OVF_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
	
	if (debouncetimer > 0) {
 190:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <debouncetimer>
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <__vector_13+0x1a>
		debouncetimer--; //Decrementamos el timer de debounce
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <debouncetimer>
	}
	
	if (~eepromactive){
	if (recordlight > 0) {
 19e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <recordlight>
 1a2:	88 23       	and	r24, r24
 1a4:	21 f0       	breq	.+8      	; 0x1ae <__vector_13+0x2a>
		recordlight--; // Para tener un efecto de un luz momentaneo al momento de apachar grabar
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <recordlight>
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <__vector_13+0x30>
	}
	else {PORTD &= ~(1<<PORTD7);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 77       	andi	r24, 0x7F	; 127
 1b2:	8b b9       	out	0x0b, r24	; 11
	}
	}
	
	TCNT1 = 0xFF - timer2reset;
 1b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	//TIFR1 |= (1 << TOV1);
}
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_4>:

// ISR de botones para EEPROM
ISR(PCINT1_vect){
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <__vector_4+0x28>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <__vector_4+0x2a>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
	
	if (debouncetimer != 0) {return;}
 1f6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <debouncetimer>
 1fa:	91 11       	cpse	r25, r1
 1fc:	6c c0       	rjmp	.+216    	; 0x2d6 <__vector_4+0x10e>
		else {debouncetimer = debouncetimerrestart; //encendemos debounce
 1fe:	95 e0       	ldi	r25, 0x05	; 5
 200:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <debouncetimer>
		}
		
	if ((PINC & (0b00000001)) == 0) { //C0 - next eeprom
 204:	30 99       	sbic	0x06, 0	; 6
 206:	27 c0       	rjmp	.+78     	; 0x256 <__vector_4+0x8e>
		eepromselect++;
 208:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <eepromselect>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <eepromselect>
		if (eepromselect > 0b00000011) {eepromselect = 0;}
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	10 f0       	brcs	.+4      	; 0x21a <__vector_4+0x52>
 216:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <eepromselect>
		
		//Desplegamos luz eeprom
		PORTD &= 0b11101011;
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8b 7e       	andi	r24, 0xEB	; 235
 21e:	8b b9       	out	0x0b, r24	; 11
		PORTD |= ((eepromselect & 0x01) << 2);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <eepromselect>
 226:	29 2f       	mov	r18, r25
 228:	21 70       	andi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	28 2b       	or	r18, r24
 236:	2b b9       	out	0x0b, r18	; 11
		PORTD |= ((eepromselect & 0x02) << 3);
 238:	2b b1       	in	r18, 0x0b	; 11
 23a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <eepromselect>
 23e:	92 70       	andi	r25, 0x02	; 2
 240:	89 2f       	mov	r24, r25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	82 2b       	or	r24, r18
 252:	8b b9       	out	0x0b, r24	; 11
 254:	2e c0       	rjmp	.+92     	; 0x2b2 <__vector_4+0xea>
	}
	else if ((((PINC & (0b00000010)) == 0) & ~(eepromactive))) { //C1 - record
 256:	96 b1       	in	r25, 0x06	; 6
 258:	96 95       	lsr	r25
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	92 27       	eor	r25, r18
 25e:	49 2f       	mov	r20, r25
 260:	41 70       	andi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <eepromactive>
 268:	89 2f       	mov	r24, r25
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	84 23       	and	r24, r20
 272:	95 23       	and	r25, r21
 274:	89 2b       	or	r24, r25
 276:	e9 f0       	breq	.+58     	; 0x2b2 <__vector_4+0xea>
		//encendemos un luz para un segundo para mostrar que grabamos el valor
		recordlight = recordlightrestart;
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <recordlight>
		PORTD |= (1<<PORTD7);
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8b b9       	out	0x0b, r24	; 11
		
		//Grabamos el valor a eeprom
		uint8_t eepromdata[4] = {ADCResult1, ADCResult2, ADCResult3, ADCResult4};
 284:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ADCResult1>
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCResult2>
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADCResult3>
 294:	8b 83       	std	Y+3, r24	; 0x03
 296:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 29a:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t eepromaddress = eepromselect * 4;
 29c:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <eepromselect>
 2a0:	66 0f       	add	r22, r22
 2a2:	66 0f       	add	r22, r22
		eeprom_write_block(eepromdata, eepromaddress, 4);
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	44 e0       	ldi	r20, 0x04	; 4
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 a8 03 	call	0x750	; 0x750 <eeprom_write_block>
	}
	
	if ((PINC & (0b00000100)) == 0) { //C2 - next eeprom
 2b2:	32 99       	sbic	0x06, 2	; 6
 2b4:	10 c0       	rjmp	.+32     	; 0x2d6 <__vector_4+0x10e>
		
		if (eepromactive) {PORTD &= ~(1<<PORTD7);
 2b6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <eepromactive>
 2ba:	88 23       	and	r24, r24
 2bc:	31 f0       	breq	.+12     	; 0x2ca <__vector_4+0x102>
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	8f 77       	andi	r24, 0x7F	; 127
 2c2:	8b b9       	out	0x0b, r24	; 11
		eepromactive = 0;}
 2c4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <eepromactive>
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <__vector_4+0x10e>
			else {PORTD |= (1<<PORTD7);
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	8b b9       	out	0x0b, r24	; 11
			eepromactive = 1;}
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <eepromactive>
	}
	
	
	
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <moveServos>:


//Este funcion sirve para mover los 4 servos
void moveServos(uint16_t servo1, uint16_t servo2, uint16_t servo3, uint16_t servo4) { 
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	7b 01       	movw	r14, r22
 312:	8a 01       	movw	r16, r20
 314:	e9 01       	movw	r28, r18
	
	uint16_t ADCRT1 = servo1/8 + 7;
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
	updateDutyCycle2A(ADCRT1);	
 322:	89 5f       	subi	r24, 0xF9	; 249
 324:	0e 94 92 03 	call	0x724	; 0x724 <updateDutyCycle2A>
	
	uint16_t ADCRT2 = servo2/8 + 7;
 328:	c7 01       	movw	r24, r14
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
	updateDutyCycle2B(ADCRT2);
 336:	89 5f       	subi	r24, 0xF9	; 249
 338:	0e 94 95 03 	call	0x72a	; 0x72a <updateDutyCycle2B>
	
	uint8_t ADCRT3 = servo3/16 + 4;
 33c:	c8 01       	movw	r24, r16
 33e:	92 95       	swap	r25
 340:	82 95       	swap	r24
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	89 27       	eor	r24, r25
 346:	9f 70       	andi	r25, 0x0F	; 15
 348:	89 27       	eor	r24, r25
	updateDutyCycle0A(ADCRT3);
 34a:	8c 5f       	subi	r24, 0xFC	; 252
 34c:	0e 94 8e 03 	call	0x71c	; 0x71c <updateDutyCycle0A>
	
	uint8_t ADCRT4 = servo4/16 + 4;
 350:	ce 01       	movw	r24, r28
 352:	92 95       	swap	r25
 354:	82 95       	swap	r24
 356:	8f 70       	andi	r24, 0x0F	; 15
 358:	89 27       	eor	r24, r25
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	89 27       	eor	r24, r25
	updateDutyCycle0B(ADCRT4);
 35e:	8c 5f       	subi	r24, 0xFC	; 252
 360:	0e 94 90 03 	call	0x720	; 0x720 <updateDutyCycle0B>
	
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	08 95       	ret

00000372 <main>:
	
	sei();
}

int main(void)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <main+0x6>
 378:	00 d0       	rcall	.+0      	; 0x37a <main+0x8>
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
	setup();
 37e:	0e 94 6b 00 	call	0xd6	; 0xd6 <setup>
	while (1) //Ejecutamos los ADCs de los 3 channels
	{
		
		//Bloque principal
		
		if (!eepromactive) {//Si el eeprom esta desactivado revisamos datos del ADC
 382:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <eepromactive>
 386:	81 11       	cpse	r24, r1
 388:	17 c0       	rjmp	.+46     	; 0x3b8 <main+0x46>
 38a:	04 e0       	ldi	r16, 0x04	; 4
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	10 c0       	rjmp	.+32     	; 0x3b0 <main+0x3e>
		for (int i = 4; i < 8; i++) {
		ADCChannel = i; //iniciamos el ADC convirtiendo el canal 4
 390:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(i);
 394:	80 2f       	mov	r24, r16
 396:	0e 94 ab 00 	call	0x156	; 0x156 <convertADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	2f e5       	ldi	r18, 0x5F	; 95
 39c:	8a ee       	ldi	r24, 0xEA	; 234
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x2e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x38>
 3aa:	00 00       	nop
	{
		
		//Bloque principal
		
		if (!eepromactive) {//Si el eeprom esta desactivado revisamos datos del ADC
		for (int i = 4; i < 8; i++) {
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	08 30       	cpi	r16, 0x08	; 8
 3b2:	11 05       	cpc	r17, r1
 3b4:	6c f3       	brlt	.-38     	; 0x390 <main+0x1e>
 3b6:	e5 cf       	rjmp	.-54     	; 0x382 <main+0x10>
		ADCChannel = i; //iniciamos el ADC convirtiendo el canal 4
		convertADC(i);
		_delay_ms(300);
		}}
		else if (eepromactive) { //Si el eeprom esta activado 
 3b8:	88 23       	and	r24, r24
 3ba:	19 f3       	breq	.-58     	; 0x382 <main+0x10>
			PORTD |= (1<<PORTD7);
 3bc:	8b b1       	in	r24, 0x0b	; 11
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	8b b9       	out	0x0b, r24	; 11
			uint8_t eepromdata[4];
			uint8_t eepromaddress = eepromselect * 4;
 3c2:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <eepromselect>
 3c6:	66 0f       	add	r22, r22
 3c8:	66 0f       	add	r22, r22
			
			eeprom_read_block(eepromdata, eepromaddress, 4);
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	44 e0       	ldi	r20, 0x04	; 4
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 98 03 	call	0x730	; 0x730 <eeprom_read_block>
			moveServos(eepromdata[0], eepromdata[1], eepromdata[2], eepromdata[1]);
 3d8:	6a 81       	ldd	r22, Y+2	; 0x02
 3da:	4b 81       	ldd	r20, Y+3	; 0x03
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	9b 01       	movw	r18, r22
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 82 01 	call	0x304	; 0x304 <moveServos>
 3ea:	cb cf       	rjmp	.-106    	; 0x382 <main+0x10>

000003ec <__vector_21>:

//////////////////////////////////////////////////////
// Funciones ISR
//////////////////////////////////////////////////////

ISR(ADC_vect){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	cli();
 40e:	f8 94       	cli
	 //Los siguientes toman los valores de los ADCs y los graban en sus ADCs respectivos 
	if (ADCChannel == 5) {
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 414:	85 30       	cpi	r24, 0x05	; 5
 416:	29 f4       	brne	.+10     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		ADCResult1 = ADCH;}
 418:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 41c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ADCResult1>
 420:	14 c0       	rjmp	.+40     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	else if (ADCChannel == 4) {
 422:	84 30       	cpi	r24, 0x04	; 4
 424:	29 f4       	brne	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		ADCResult2 = ADCH;
 426:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 42a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResult2>
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	}
	else if (ADCChannel == 6) {
 430:	86 30       	cpi	r24, 0x06	; 6
 432:	29 f4       	brne	.+10     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		ADCResult3 = ADCH;
 434:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 438:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADCResult3>
 43c:	06 c0       	rjmp	.+12     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	}
	else if (ADCChannel == 7) {
 43e:	87 30       	cpi	r24, 0x07	; 7
 440:	21 f4       	brne	.+8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		ADCResult4 = ADCH;
 442:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 446:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	} 
	
	if (!(eepromactive | adafruitactive)) {moveServos(ADCResult1, ADCResult2, ADCResult3, ADCResult4);}
 44a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <eepromactive>
 44e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adafruitactive>
 452:	89 2b       	or	r24, r25
 454:	71 f4       	brne	.+28     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 456:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <ADCResult3>
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <ADCResult2>
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ADCResult1>
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 82 01 	call	0x304	; 0x304 <moveServos>

	// transformamos el resultado de ADC para usarlo para timer1
	
	sei();
 472:	78 94       	sei
	ADCSRA |= (1<<ADIF);
 474:	ea e7       	ldi	r30, 0x7A	; 122
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 61       	ori	r24, 0x10	; 16
 47c:	80 83       	st	Z, r24
	
	return;
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <initPWM0FastA>:
void updateDutyCycle1A(uint16_t duty) {
	OCR1A = duty;
}

void updateDutyCycle1B(uint16_t duty) {
	OCR1B = duty;
 4a0:	9a b1       	in	r25, 0x0a	; 10
 4a2:	90 64       	ori	r25, 0x40	; 64
 4a4:	9a b9       	out	0x0a, r25	; 10
 4a6:	88 23       	and	r24, r24
 4a8:	11 f0       	breq	.+4      	; 0x4ae <initPWM0FastA+0xe>
 4aa:	14 bc       	out	0x24, r1	; 36
 4ac:	15 bc       	out	0x25, r1	; 37
 4ae:	84 b5       	in	r24, 0x24	; 36
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	84 bd       	out	0x24, r24	; 36
 4b4:	66 23       	and	r22, r22
 4b6:	19 f0       	breq	.+6      	; 0x4be <initPWM0FastA+0x1e>
 4b8:	84 b5       	in	r24, 0x24	; 36
 4ba:	80 64       	ori	r24, 0x40	; 64
 4bc:	84 bd       	out	0x24, r24	; 36
 4be:	84 b5       	in	r24, 0x24	; 36
 4c0:	83 60       	ori	r24, 0x03	; 3
 4c2:	84 bd       	out	0x24, r24	; 36
 4c4:	40 34       	cpi	r20, 0x40	; 64
 4c6:	51 05       	cpc	r21, r1
 4c8:	c1 f0       	breq	.+48     	; 0x4fa <initPWM0FastA+0x5a>
 4ca:	38 f4       	brcc	.+14     	; 0x4da <initPWM0FastA+0x3a>
 4cc:	41 30       	cpi	r20, 0x01	; 1
 4ce:	51 05       	cpc	r21, r1
 4d0:	61 f0       	breq	.+24     	; 0x4ea <initPWM0FastA+0x4a>
 4d2:	48 30       	cpi	r20, 0x08	; 8
 4d4:	51 05       	cpc	r21, r1
 4d6:	69 f0       	breq	.+26     	; 0x4f2 <initPWM0FastA+0x52>
 4d8:	1c c0       	rjmp	.+56     	; 0x512 <initPWM0FastA+0x72>
 4da:	41 15       	cp	r20, r1
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	58 07       	cpc	r21, r24
 4e0:	81 f0       	breq	.+32     	; 0x502 <initPWM0FastA+0x62>
 4e2:	41 15       	cp	r20, r1
 4e4:	54 40       	sbci	r21, 0x04	; 4
 4e6:	89 f0       	breq	.+34     	; 0x50a <initPWM0FastA+0x6a>
 4e8:	14 c0       	rjmp	.+40     	; 0x512 <initPWM0FastA+0x72>
 4ea:	85 b5       	in	r24, 0x25	; 37
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	85 bd       	out	0x25, r24	; 37
 4f0:	08 95       	ret
 4f2:	85 b5       	in	r24, 0x25	; 37
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	85 bd       	out	0x25, r24	; 37
 4f8:	08 95       	ret
 4fa:	85 b5       	in	r24, 0x25	; 37
 4fc:	83 60       	ori	r24, 0x03	; 3
 4fe:	85 bd       	out	0x25, r24	; 37
 500:	08 95       	ret
 502:	85 b5       	in	r24, 0x25	; 37
 504:	84 60       	ori	r24, 0x04	; 4
 506:	85 bd       	out	0x25, r24	; 37
 508:	08 95       	ret
 50a:	85 b5       	in	r24, 0x25	; 37
 50c:	85 60       	ori	r24, 0x05	; 5
 50e:	85 bd       	out	0x25, r24	; 37
 510:	08 95       	ret
 512:	85 b5       	in	r24, 0x25	; 37
 514:	85 60       	ori	r24, 0x05	; 5
 516:	85 bd       	out	0x25, r24	; 37
 518:	08 95       	ret

0000051a <initPWM0FastB>:
 51a:	9a b1       	in	r25, 0x0a	; 10
 51c:	90 62       	ori	r25, 0x20	; 32
 51e:	9a b9       	out	0x0a, r25	; 10
 520:	88 23       	and	r24, r24
 522:	11 f0       	breq	.+4      	; 0x528 <initPWM0FastB+0xe>
 524:	14 bc       	out	0x24, r1	; 36
 526:	15 bc       	out	0x25, r1	; 37
 528:	84 b5       	in	r24, 0x24	; 36
 52a:	80 62       	ori	r24, 0x20	; 32
 52c:	84 bd       	out	0x24, r24	; 36
 52e:	66 23       	and	r22, r22
 530:	19 f0       	breq	.+6      	; 0x538 <initPWM0FastB+0x1e>
 532:	84 b5       	in	r24, 0x24	; 36
 534:	80 61       	ori	r24, 0x10	; 16
 536:	84 bd       	out	0x24, r24	; 36
 538:	84 b5       	in	r24, 0x24	; 36
 53a:	83 60       	ori	r24, 0x03	; 3
 53c:	84 bd       	out	0x24, r24	; 36
 53e:	40 34       	cpi	r20, 0x40	; 64
 540:	51 05       	cpc	r21, r1
 542:	c1 f0       	breq	.+48     	; 0x574 <initPWM0FastB+0x5a>
 544:	38 f4       	brcc	.+14     	; 0x554 <initPWM0FastB+0x3a>
 546:	41 30       	cpi	r20, 0x01	; 1
 548:	51 05       	cpc	r21, r1
 54a:	61 f0       	breq	.+24     	; 0x564 <initPWM0FastB+0x4a>
 54c:	48 30       	cpi	r20, 0x08	; 8
 54e:	51 05       	cpc	r21, r1
 550:	69 f0       	breq	.+26     	; 0x56c <initPWM0FastB+0x52>
 552:	1c c0       	rjmp	.+56     	; 0x58c <initPWM0FastB+0x72>
 554:	41 15       	cp	r20, r1
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	58 07       	cpc	r21, r24
 55a:	81 f0       	breq	.+32     	; 0x57c <initPWM0FastB+0x62>
 55c:	41 15       	cp	r20, r1
 55e:	54 40       	sbci	r21, 0x04	; 4
 560:	89 f0       	breq	.+34     	; 0x584 <initPWM0FastB+0x6a>
 562:	14 c0       	rjmp	.+40     	; 0x58c <initPWM0FastB+0x72>
 564:	85 b5       	in	r24, 0x25	; 37
 566:	81 60       	ori	r24, 0x01	; 1
 568:	85 bd       	out	0x25, r24	; 37
 56a:	08 95       	ret
 56c:	85 b5       	in	r24, 0x25	; 37
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	85 bd       	out	0x25, r24	; 37
 572:	08 95       	ret
 574:	85 b5       	in	r24, 0x25	; 37
 576:	83 60       	ori	r24, 0x03	; 3
 578:	85 bd       	out	0x25, r24	; 37
 57a:	08 95       	ret
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	84 60       	ori	r24, 0x04	; 4
 580:	85 bd       	out	0x25, r24	; 37
 582:	08 95       	ret
 584:	85 b5       	in	r24, 0x25	; 37
 586:	85 60       	ori	r24, 0x05	; 5
 588:	85 bd       	out	0x25, r24	; 37
 58a:	08 95       	ret
 58c:	85 b5       	in	r24, 0x25	; 37
 58e:	85 60       	ori	r24, 0x05	; 5
 590:	85 bd       	out	0x25, r24	; 37
 592:	08 95       	ret

00000594 <initPWM2FastA>:
 594:	94 b1       	in	r25, 0x04	; 4
 596:	98 60       	ori	r25, 0x08	; 8
 598:	94 b9       	out	0x04, r25	; 4
 59a:	88 23       	and	r24, r24
 59c:	21 f0       	breq	.+8      	; 0x5a6 <initPWM2FastA+0x12>
 59e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 5a2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 5a6:	e0 eb       	ldi	r30, 0xB0	; 176
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	80 68       	ori	r24, 0x80	; 128
 5ae:	80 83       	st	Z, r24
 5b0:	66 23       	and	r22, r22
 5b2:	19 f0       	breq	.+6      	; 0x5ba <initPWM2FastA+0x26>
 5b4:	80 81       	ld	r24, Z
 5b6:	80 64       	ori	r24, 0x40	; 64
 5b8:	80 83       	st	Z, r24
 5ba:	e0 eb       	ldi	r30, 0xB0	; 176
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	83 60       	ori	r24, 0x03	; 3
 5c2:	80 83       	st	Z, r24
 5c4:	40 34       	cpi	r20, 0x40	; 64
 5c6:	51 05       	cpc	r21, r1
 5c8:	49 f1       	breq	.+82     	; 0x61c <initPWM2FastA+0x88>
 5ca:	50 f4       	brcc	.+20     	; 0x5e0 <initPWM2FastA+0x4c>
 5cc:	48 30       	cpi	r20, 0x08	; 8
 5ce:	51 05       	cpc	r21, r1
 5d0:	c9 f0       	breq	.+50     	; 0x604 <initPWM2FastA+0x70>
 5d2:	40 32       	cpi	r20, 0x20	; 32
 5d4:	51 05       	cpc	r21, r1
 5d6:	e1 f0       	breq	.+56     	; 0x610 <initPWM2FastA+0x7c>
 5d8:	41 30       	cpi	r20, 0x01	; 1
 5da:	51 05       	cpc	r21, r1
 5dc:	b9 f5       	brne	.+110    	; 0x64c <initPWM2FastA+0xb8>
 5de:	0c c0       	rjmp	.+24     	; 0x5f8 <initPWM2FastA+0x64>
 5e0:	41 15       	cp	r20, r1
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	58 07       	cpc	r21, r24
 5e6:	31 f1       	breq	.+76     	; 0x634 <initPWM2FastA+0xa0>
 5e8:	41 15       	cp	r20, r1
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	58 07       	cpc	r21, r24
 5ee:	41 f1       	breq	.+80     	; 0x640 <initPWM2FastA+0xac>
 5f0:	40 38       	cpi	r20, 0x80	; 128
 5f2:	51 05       	cpc	r21, r1
 5f4:	59 f5       	brne	.+86     	; 0x64c <initPWM2FastA+0xb8>
 5f6:	18 c0       	rjmp	.+48     	; 0x628 <initPWM2FastA+0x94>
 5f8:	e1 eb       	ldi	r30, 0xB1	; 177
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	80 83       	st	Z, r24
 602:	08 95       	ret
 604:	e1 eb       	ldi	r30, 0xB1	; 177
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	80 83       	st	Z, r24
 60e:	08 95       	ret
 610:	e1 eb       	ldi	r30, 0xB1	; 177
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	83 60       	ori	r24, 0x03	; 3
 618:	80 83       	st	Z, r24
 61a:	08 95       	ret
 61c:	e1 eb       	ldi	r30, 0xB1	; 177
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	84 60       	ori	r24, 0x04	; 4
 624:	80 83       	st	Z, r24
 626:	08 95       	ret
 628:	e1 eb       	ldi	r30, 0xB1	; 177
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	85 60       	ori	r24, 0x05	; 5
 630:	80 83       	st	Z, r24
 632:	08 95       	ret
 634:	e1 eb       	ldi	r30, 0xB1	; 177
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	86 60       	ori	r24, 0x06	; 6
 63c:	80 83       	st	Z, r24
 63e:	08 95       	ret
 640:	e1 eb       	ldi	r30, 0xB1	; 177
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	87 60       	ori	r24, 0x07	; 7
 648:	80 83       	st	Z, r24
 64a:	08 95       	ret
 64c:	e1 eb       	ldi	r30, 0xB1	; 177
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	87 60       	ori	r24, 0x07	; 7
 654:	80 83       	st	Z, r24
 656:	08 95       	ret

00000658 <initPWM2FastB>:
 658:	9a b1       	in	r25, 0x0a	; 10
 65a:	98 60       	ori	r25, 0x08	; 8
 65c:	9a b9       	out	0x0a, r25	; 10
 65e:	88 23       	and	r24, r24
 660:	21 f0       	breq	.+8      	; 0x66a <initPWM2FastB+0x12>
 662:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 666:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 66a:	e0 eb       	ldi	r30, 0xB0	; 176
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	80 62       	ori	r24, 0x20	; 32
 672:	80 83       	st	Z, r24
 674:	66 23       	and	r22, r22
 676:	19 f0       	breq	.+6      	; 0x67e <initPWM2FastB+0x26>
 678:	80 81       	ld	r24, Z
 67a:	80 61       	ori	r24, 0x10	; 16
 67c:	80 83       	st	Z, r24
 67e:	e0 eb       	ldi	r30, 0xB0	; 176
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	83 60       	ori	r24, 0x03	; 3
 686:	80 83       	st	Z, r24
 688:	40 34       	cpi	r20, 0x40	; 64
 68a:	51 05       	cpc	r21, r1
 68c:	49 f1       	breq	.+82     	; 0x6e0 <initPWM2FastB+0x88>
 68e:	50 f4       	brcc	.+20     	; 0x6a4 <initPWM2FastB+0x4c>
 690:	48 30       	cpi	r20, 0x08	; 8
 692:	51 05       	cpc	r21, r1
 694:	c9 f0       	breq	.+50     	; 0x6c8 <initPWM2FastB+0x70>
 696:	40 32       	cpi	r20, 0x20	; 32
 698:	51 05       	cpc	r21, r1
 69a:	e1 f0       	breq	.+56     	; 0x6d4 <initPWM2FastB+0x7c>
 69c:	41 30       	cpi	r20, 0x01	; 1
 69e:	51 05       	cpc	r21, r1
 6a0:	b9 f5       	brne	.+110    	; 0x710 <initPWM2FastB+0xb8>
 6a2:	0c c0       	rjmp	.+24     	; 0x6bc <initPWM2FastB+0x64>
 6a4:	41 15       	cp	r20, r1
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	58 07       	cpc	r21, r24
 6aa:	31 f1       	breq	.+76     	; 0x6f8 <initPWM2FastB+0xa0>
 6ac:	41 15       	cp	r20, r1
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	58 07       	cpc	r21, r24
 6b2:	41 f1       	breq	.+80     	; 0x704 <initPWM2FastB+0xac>
 6b4:	40 38       	cpi	r20, 0x80	; 128
 6b6:	51 05       	cpc	r21, r1
 6b8:	59 f5       	brne	.+86     	; 0x710 <initPWM2FastB+0xb8>
 6ba:	18 c0       	rjmp	.+48     	; 0x6ec <initPWM2FastB+0x94>
 6bc:	e1 eb       	ldi	r30, 0xB1	; 177
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	80 83       	st	Z, r24
 6c6:	08 95       	ret
 6c8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	82 60       	ori	r24, 0x02	; 2
 6d0:	80 83       	st	Z, r24
 6d2:	08 95       	ret
 6d4:	e1 eb       	ldi	r30, 0xB1	; 177
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	83 60       	ori	r24, 0x03	; 3
 6dc:	80 83       	st	Z, r24
 6de:	08 95       	ret
 6e0:	e1 eb       	ldi	r30, 0xB1	; 177
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	84 60       	ori	r24, 0x04	; 4
 6e8:	80 83       	st	Z, r24
 6ea:	08 95       	ret
 6ec:	e1 eb       	ldi	r30, 0xB1	; 177
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	85 60       	ori	r24, 0x05	; 5
 6f4:	80 83       	st	Z, r24
 6f6:	08 95       	ret
 6f8:	e1 eb       	ldi	r30, 0xB1	; 177
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	86 60       	ori	r24, 0x06	; 6
 700:	80 83       	st	Z, r24
 702:	08 95       	ret
 704:	e1 eb       	ldi	r30, 0xB1	; 177
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	87 60       	ori	r24, 0x07	; 7
 70c:	80 83       	st	Z, r24
 70e:	08 95       	ret
 710:	e1 eb       	ldi	r30, 0xB1	; 177
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	87 60       	ori	r24, 0x07	; 7
 718:	80 83       	st	Z, r24
 71a:	08 95       	ret

0000071c <updateDutyCycle0A>:
 71c:	87 bd       	out	0x27, r24	; 39
 71e:	08 95       	ret

00000720 <updateDutyCycle0B>:
 720:	88 bd       	out	0x28, r24	; 40
 722:	08 95       	ret

00000724 <updateDutyCycle2A>:
}


void updateDutyCycle2A(uint8_t duty) {
	OCR2A = duty;
 724:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 728:	08 95       	ret

0000072a <updateDutyCycle2B>:
}

void updateDutyCycle2B(uint8_t duty) {
	OCR2B = duty;
 72a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 72e:	08 95       	ret

00000730 <eeprom_read_block>:
 730:	dc 01       	movw	r26, r24
 732:	cb 01       	movw	r24, r22

00000734 <eeprom_read_blraw>:
 734:	fc 01       	movw	r30, r24
 736:	f9 99       	sbic	0x1f, 1	; 31
 738:	fe cf       	rjmp	.-4      	; 0x736 <eeprom_read_blraw+0x2>
 73a:	06 c0       	rjmp	.+12     	; 0x748 <eeprom_read_blraw+0x14>
 73c:	f2 bd       	out	0x22, r31	; 34
 73e:	e1 bd       	out	0x21, r30	; 33
 740:	f8 9a       	sbi	0x1f, 0	; 31
 742:	31 96       	adiw	r30, 0x01	; 1
 744:	00 b4       	in	r0, 0x20	; 32
 746:	0d 92       	st	X+, r0
 748:	41 50       	subi	r20, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	b8 f7       	brcc	.-18     	; 0x73c <eeprom_read_blraw+0x8>
 74e:	08 95       	ret

00000750 <eeprom_write_block>:
 750:	dc 01       	movw	r26, r24
 752:	cb 01       	movw	r24, r22
 754:	03 c0       	rjmp	.+6      	; 0x75c <eeprom_write_block+0xc>
 756:	2d 91       	ld	r18, X+
 758:	0e 94 b3 03 	call	0x766	; 0x766 <eeprom_write_r18>
 75c:	41 50       	subi	r20, 0x01	; 1
 75e:	50 40       	sbci	r21, 0x00	; 0
 760:	d0 f7       	brcc	.-12     	; 0x756 <eeprom_write_block+0x6>
 762:	08 95       	ret

00000764 <eeprom_write_byte>:
 764:	26 2f       	mov	r18, r22

00000766 <eeprom_write_r18>:
 766:	f9 99       	sbic	0x1f, 1	; 31
 768:	fe cf       	rjmp	.-4      	; 0x766 <eeprom_write_r18>
 76a:	1f ba       	out	0x1f, r1	; 31
 76c:	92 bd       	out	0x22, r25	; 34
 76e:	81 bd       	out	0x21, r24	; 33
 770:	20 bd       	out	0x20, r18	; 32
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	fa 9a       	sbi	0x1f, 2	; 31
 778:	f9 9a       	sbi	0x1f, 1	; 31
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
