
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  00000ab8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e1  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000948  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7b  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00003a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077d  00000000  00000000  00003d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083a  00000000  00000000  000044c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_3>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 02 	call	0x566	; 0x566 <main>
  9e:	0c 94 02 05 	jmp	0xa04	; 0xa04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
// Funciones ADC
//////////////////////////////////////////////////////

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	ADCSRA |= (0b00000100); //Prescaler de 16
  ce:	80 81       	ld	r24, Z
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <convertADC>:
}

void convertADC(char channel) //Funcion para leer info ADC
{	ADMUX &= ~(0x0F); // Borramos los ultimos 4 bits de ADMUX
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	90 83       	st	Z, r25
	
	if (channel > 8) {channel = 8;} //valor maximo es 8
  e0:	89 30       	cpi	r24, 0x09	; 9
  e2:	08 f0       	brcs	.+2      	; 0xe6 <convertADC+0x10>
  e4:	88 e0       	ldi	r24, 0x08	; 8
	
	if (channel < 6) {DIDR0 = channel;}
  e6:	86 30       	cpi	r24, 0x06	; 6
  e8:	10 f4       	brcc	.+4      	; 0xee <convertADC+0x18>
  ea:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	ADMUX |= channel; // seleccionamos el canal correcto
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	89 2b       	or	r24, r25
  f6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // iniciamos el ADC
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <__vector_13>:
	
	return;
}

// ISR de timer2 para debounce
ISR(TIMER1_OVF_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	
	if (debouncetimer > 0) {
 110:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <debouncetimer>
 114:	88 23       	and	r24, r24
 116:	19 f0       	breq	.+6      	; 0x11e <__vector_13+0x1a>
		debouncetimer--; //Decrementamos el timer de debounce
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <debouncetimer>
	}
	
	if (debouncetimer2 > 0) {
 11e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <debouncetimer2>
 122:	88 23       	and	r24, r24
 124:	19 f0       	breq	.+6      	; 0x12c <__vector_13+0x28>
		debouncetimer2--; //Decrementamos el timer de debounce
 126:	81 50       	subi	r24, 0x01	; 1
 128:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <debouncetimer2>
	}
	
	if (~eepromactive){
	if (recordlight > 0) {
 12c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <recordlight>
 130:	88 23       	and	r24, r24
 132:	21 f0       	breq	.+8      	; 0x13c <__vector_13+0x38>
		recordlight--; // Para tener un efecto de un luz momentaneo al momento de apachar grabar
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <recordlight>
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__vector_13+0x3e>
	}
	else {PORTD &= ~(1<<PORTD7);
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	8b b9       	out	0x0b, r24	; 11
	}
	}
	
	TCNT1 = 0xFF - timer2reset;
 142:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 146:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	//TIFR1 |= (1 << TOV1);
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_3>:

ISR(PCINT0_vect){ //Apagar y encender modo adafruit
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
	if (debouncetimer2 != 0) {return;}
 162:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <debouncetimer2>
 166:	81 11       	cpse	r24, r1
 168:	13 c0       	rjmp	.+38     	; 0x190 <__vector_3+0x3a>
	else {debouncetimer2 = 10; //encendemos debounce
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <debouncetimer2>
	}
	
	if (adafruitactive) {PORTB &= ~(1<<PORTB4);
 170:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adafruitactive>
 174:	88 23       	and	r24, r24
 176:	31 f0       	breq	.+12     	; 0x184 <__vector_3+0x2e>
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	85 b9       	out	0x05, r24	; 5
		adafruitactive = 0;}
 17e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <adafruitactive>
 182:	06 c0       	rjmp	.+12     	; 0x190 <__vector_3+0x3a>
	else {PORTB |= (1<<PORTB4);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 61       	ori	r24, 0x10	; 16
 188:	85 b9       	out	0x05, r24	; 5
		adafruitactive = 1;}
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adafruitactive>
}
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_4>:

// ISR de botones para EEPROM
ISR(PCINT1_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <__vector_4+0x28>
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <__vector_4+0x2a>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	
	if (debouncetimer != 0) {return;}
 1ca:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <debouncetimer>
 1ce:	91 11       	cpse	r25, r1
 1d0:	6c c0       	rjmp	.+216    	; 0x2aa <__vector_4+0x10e>
		else {debouncetimer = debouncetimerrestart; //encendemos debounce
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <debouncetimer>
		}
		
	if ((PINC & (0b00000001)) == 0) { //C0 - next eeprom
 1d8:	30 99       	sbic	0x06, 0	; 6
 1da:	27 c0       	rjmp	.+78     	; 0x22a <__vector_4+0x8e>
		eepromselect++;
 1dc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <eepromselect>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <eepromselect>
		if (eepromselect > 0b00000011) {eepromselect = 0;}
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	10 f0       	brcs	.+4      	; 0x1ee <__vector_4+0x52>
 1ea:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <eepromselect>
		
		//Desplegamos luz eeprom
		PORTD &= 0b11101011;
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8b 7e       	andi	r24, 0xEB	; 235
 1f2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= ((eepromselect & 0x01) << 2);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <eepromselect>
 1fa:	29 2f       	mov	r18, r25
 1fc:	21 70       	andi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	28 2b       	or	r18, r24
 20a:	2b b9       	out	0x0b, r18	; 11
		PORTD |= ((eepromselect & 0x02) << 3);
 20c:	2b b1       	in	r18, 0x0b	; 11
 20e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <eepromselect>
 212:	92 70       	andi	r25, 0x02	; 2
 214:	89 2f       	mov	r24, r25
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	82 2b       	or	r24, r18
 226:	8b b9       	out	0x0b, r24	; 11
 228:	2e c0       	rjmp	.+92     	; 0x286 <__vector_4+0xea>
	}
	else if ((((PINC & (0b00000010)) == 0) & ~(eepromactive))) { //C1 - record
 22a:	96 b1       	in	r25, 0x06	; 6
 22c:	96 95       	lsr	r25
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	92 27       	eor	r25, r18
 232:	49 2f       	mov	r20, r25
 234:	41 70       	andi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <eepromactive>
 23c:	89 2f       	mov	r24, r25
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	84 23       	and	r24, r20
 246:	95 23       	and	r25, r21
 248:	89 2b       	or	r24, r25
 24a:	e9 f0       	breq	.+58     	; 0x286 <__vector_4+0xea>
		//encendemos un luz para un segundo para mostrar que grabamos el valor
		recordlight = recordlightrestart;
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <recordlight>
		PORTD |= (1<<PORTD7);
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	80 68       	ori	r24, 0x80	; 128
 256:	8b b9       	out	0x0b, r24	; 11
		
		//Grabamos el valor a eeprom
		uint8_t eepromdata[4] = {ADCResult1, ADCResult2, ADCResult3, ADCResult4};
 258:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ADCResult1>
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ADCResult2>
 262:	8a 83       	std	Y+2, r24	; 0x02
 264:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ADCResult3>
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 26e:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t eepromaddress = eepromselect * 4;
 270:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <eepromselect>
 274:	66 0f       	add	r22, r22
 276:	66 0f       	add	r22, r22
		eeprom_write_block(eepromdata, eepromaddress, 4);
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	44 e0       	ldi	r20, 0x04	; 4
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <eeprom_write_block>
	}
	
	if ((PINC & (0b00000100)) == 0) { //C2 - play
 286:	32 99       	sbic	0x06, 2	; 6
 288:	10 c0       	rjmp	.+32     	; 0x2aa <__vector_4+0x10e>
		
		if (eepromactive) {PORTD &= ~(1<<PORTD7);
 28a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <eepromactive>
 28e:	88 23       	and	r24, r24
 290:	31 f0       	breq	.+12     	; 0x29e <__vector_4+0x102>
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8f 77       	andi	r24, 0x7F	; 127
 296:	8b b9       	out	0x0b, r24	; 11
		eepromactive = 0;}
 298:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <eepromactive>
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <__vector_4+0x10e>
			else {PORTD |= (1<<PORTD7);
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	8b b9       	out	0x0b, r24	; 11
			eepromactive = 1;}
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <eepromactive>
	}
	
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <moveServos>:


//Este funcion sirve para mover los 4 servos
void moveServos(uint16_t servo1, uint16_t servo2, uint16_t servo3, uint16_t servo4) { 
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	eb 01       	movw	r28, r22
 2e6:	7a 01       	movw	r14, r20
 2e8:	89 01       	movw	r16, r18
	
	uint16_t ADCRT1 = servo1/16 + 7; 
 2ea:	92 95       	swap	r25
 2ec:	82 95       	swap	r24
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	89 27       	eor	r24, r25
 2f2:	9f 70       	andi	r25, 0x0F	; 15
 2f4:	89 27       	eor	r24, r25
	updateDutyCycle2A(ADCRT1);	//Base 0 - 90 grados
 2f6:	89 5f       	subi	r24, 0xF9	; 249
 2f8:	0e 94 9d 04 	call	0x93a	; 0x93a <updateDutyCycle2A>
	
	uint16_t ADCRT2 = servo2/16 + 7; 
 2fc:	ce 01       	movw	r24, r28
 2fe:	92 95       	swap	r25
 300:	82 95       	swap	r24
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	89 27       	eor	r24, r25
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 27       	eor	r24, r25
	updateDutyCycle2B(ADCRT2); //Codo 0-90
 30a:	89 5f       	subi	r24, 0xF9	; 249
 30c:	0e 94 a0 04 	call	0x940	; 0x940 <updateDutyCycle2B>
	
	uint8_t ADCRT3 = servo3/48 + 9;
 310:	97 01       	movw	r18, r14
 312:	ab ea       	ldi	r26, 0xAB	; 171
 314:	ba ea       	ldi	r27, 0xAA	; 170
 316:	0e 94 b7 04 	call	0x96e	; 0x96e <__umulhisi3>
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	92 95       	swap	r25
 320:	82 95       	swap	r24
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	89 27       	eor	r24, r25
 326:	9f 70       	andi	r25, 0x0F	; 15
 328:	89 27       	eor	r24, r25
	updateDutyCycle0A(ADCRT3); //Hombro 60 - 120 grados
 32a:	87 5f       	subi	r24, 0xF7	; 247
 32c:	0e 94 99 04 	call	0x932	; 0x932 <updateDutyCycle0A>
	
	uint8_t ADCRT4 = servo4/38 + 4;
 330:	98 01       	movw	r18, r16
 332:	a5 e9       	ldi	r26, 0x95	; 149
 334:	b7 ed       	ldi	r27, 0xD7	; 215
 336:	0e 94 b7 04 	call	0x96e	; 0x96e <__umulhisi3>
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	92 95       	swap	r25
 340:	82 95       	swap	r24
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	89 27       	eor	r24, r25
 346:	9f 70       	andi	r25, 0x0F	; 15
 348:	89 27       	eor	r24, r25
	updateDutyCycle0B(ADCRT4); //Pinza 0 - 75 grados
 34a:	8c 5f       	subi	r24, 0xFC	; 252
 34c:	0e 94 9b 04 	call	0x936	; 0x936 <updateDutyCycle0B>
	
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	08 95       	ret

0000035e <__vector_21>:

//////////////////////////////////////////////////////
// Funciones ISR
//////////////////////////////////////////////////////

ISR(ADC_vect){
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	4f 93       	push	r20
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	cli();
 380:	f8 94       	cli
	 //Los siguientes toman los valores de los ADCs y los graban en sus ADCs respectivos 
	if (ADCChannel == 4) {
 382:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ADCChannel>
 386:	84 30       	cpi	r24, 0x04	; 4
 388:	29 f4       	brne	.+10     	; 0x394 <__vector_21+0x36>
		ADCResult1 = ADCH;}
 38a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 38e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <ADCResult1>
 392:	14 c0       	rjmp	.+40     	; 0x3bc <__vector_21+0x5e>
	else if (ADCChannel == 6) {
 394:	86 30       	cpi	r24, 0x06	; 6
 396:	29 f4       	brne	.+10     	; 0x3a2 <__vector_21+0x44>
		ADCResult2 = ADCH;
 398:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 39c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCResult2>
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__vector_21+0x5e>
	}
	else if (ADCChannel == 5) {
 3a2:	85 30       	cpi	r24, 0x05	; 5
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <__vector_21+0x52>
		ADCResult3 = ADCH;
 3a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3aa:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ADCResult3>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <__vector_21+0x5e>
	}
	else if (ADCChannel == 7) {
 3b0:	87 30       	cpi	r24, 0x07	; 7
 3b2:	21 f4       	brne	.+8      	; 0x3bc <__vector_21+0x5e>
		ADCResult4 = ADCH;
 3b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	} 
	
	if (!(eepromactive | adafruitactive)) {moveServos(ADCResult1, ADCResult2, ADCResult3, ADCResult4);}
 3bc:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <eepromactive>
 3c0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adafruitactive>
 3c4:	89 2b       	or	r24, r25
 3c6:	71 f4       	brne	.+28     	; 0x3e4 <__vector_21+0x86>
 3c8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <ADCResult3>
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <ADCResult2>
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ADCResult1>
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <moveServos>

	// transformamos el resultado de ADC para usarlo para timer1
	
	sei();
 3e4:	78 94       	sei
	ADCSRA |= (1<<ADIF);
 3e6:	ea e7       	ldi	r30, 0x7A	; 122
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 61       	ori	r24, 0x10	; 16
 3ee:	80 83       	st	Z, r24
	
	return;
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <initUART9600>:
}

//Funciones UART

void initUART9600(void) {
	DDRD |= (1<<DDD1); // arreglamos d0 y d1
 412:	8a b1       	in	r24, 0x0a	; 10
 414:	82 60       	ori	r24, 0x02	; 2
 416:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 418:	e0 ec       	ldi	r30, 0xC0	; 192
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // double speed
 41e:	80 81       	ld	r24, Z
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 83       	st	Z, r24
	
	UCSR0B = 0;
 424:	e1 ec       	ldi	r30, 0xC1	; 193
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //RX con interrupt y TX encendido
 42a:	80 81       	ld	r24, Z
 42c:	88 69       	ori	r24, 0x98	; 152
 42e:	80 83       	st	Z, r24
	
	UCSR0C = 0;
 430:	e2 ec       	ldi	r30, 0xC2	; 194
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	10 82       	st	Z, r1
	UCSR0C |= (1<< UCSZ01)|(1<<UCSZ00); //8 bits sin paridad con 1 bit de stop
 436:	80 81       	ld	r24, Z
 438:	86 60       	ori	r24, 0x06	; 6
 43a:	80 83       	st	Z, r24
	
	UBRR0 = 25; //Baud rate de 9600 para prescaler de 2MHz
 43c:	89 e1       	ldi	r24, 0x19	; 25
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 444:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 448:	08 95       	ret

0000044a <setup>:
char codostring[] = "CODO\n";
char pinzastring[] = "PINZA\n";

void setup(void)
{
	cli();
 44a:	f8 94       	cli
	
	// Control prescaler
	CLKPR = (0b10000000); // habilitamos cambios del prescale
 44c:	e1 e6       	ldi	r30, 0x61	; 97
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	80 83       	st	Z, r24
	CLKPR = (0x03); // Colocamos prescaler de 8
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	80 83       	st	Z, r24

	//Inicializamos botones (C0 - C3 para control de EEPROM)
	PCICR = (0b00000011);
 458:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10) | (1<<PCINT11); //Interrupts en C0 - C3
 45c:	8f e0       	ldi	r24, 0x0F	; 15
 45e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	PCMSK0 = (1<<PCINT5);
 462:	90 e2       	ldi	r25, 0x20	; 32
 464:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PORTC = (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3); //Pullup
 468:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1<<PORTB5);
 46a:	85 b1       	in	r24, 0x05	; 5
 46c:	80 62       	ori	r24, 0x20	; 32
 46e:	85 b9       	out	0x05, r24	; 5
	DDRC = 0;
 470:	17 b8       	out	0x07, r1	; 7

	// Inicializacion PWM
	initPWM0FastA(reset, no_invertido, 256); // Activamos timer 0 en modo pwm, utilizando OCR0A y OCR0B
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	51 e0       	ldi	r21, 0x01	; 1
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initPWM0FastA>
	initPWM0FastB(no_reset, no_invertido, 256);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	51 e0       	ldi	r21, 0x01	; 1
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 98 03 	call	0x730	; 0x730 <initPWM0FastB>
	initPWM2FastA(reset, no_invertido, 128);
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 d5 03 	call	0x7aa	; 0x7aa <initPWM2FastA>
	initPWM2FastB(no_reset, no_invertido, 128);
 496:	40 e8       	ldi	r20, 0x80	; 128
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 37 04 	call	0x86e	; 0x86e <initPWM2FastB>
	
	//Inicializamos Timer2 para debounce y "PWM"
	TCCR1A = 0;
 4a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0b00000001; //Prescaler 256
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 0x01; //Overflow interrupt
 4ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCNT1 = 0xFFFF - timer2reset; 
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	9f ef       	ldi	r25, 0xFF	; 255
 4b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	DDRD |= 0b10010100; // D2 y D4 - luces mostrando eeprom seleccionado
 4bc:	8a b1       	in	r24, 0x0a	; 10
 4be:	84 69       	ori	r24, 0x94	; 148
 4c0:	8a b9       	out	0x0a, r24	; 10
	//D7 - luz eeprom activo */
	DDRB |= (1<<DDB4); // Luz para mostrar que adafruit esta activo
 4c2:	84 b1       	in	r24, 0x04	; 4
 4c4:	80 61       	ori	r24, 0x10	; 16
 4c6:	84 b9       	out	0x04, r24	; 4
	
	initADC();
 4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	initUART9600();
 4cc:	0e 94 09 02 	call	0x412	; 0x412 <initUART9600>
	
	sei();
 4d0:	78 94       	sei
 4d2:	08 95       	ret

000004d4 <writeUART>:
}



void writeUART(char senddata){ // Funcion para mandar un caracter por UART
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
 4d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4d8:	95 ff       	sbrs	r25, 5
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <writeUART>
	UDR0 = senddata; //Colocamos el valor a mandar
 4dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4e0:	08 95       	ret

000004e2 <writeString>:
}

void writeString(char* senddata){ //Funcion para mandar varios datos
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <writeString+0x12>
		writeUART(senddata[i]);
 4ee:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <writeUART>
	while(!(UCSR0A & (1<<UDRE0) )); // Revisamos si el buffer esta lleno
	UDR0 = senddata; //Colocamos el valor a mandar
}

void writeString(char* senddata){ //Funcion para mandar varios datos
	for (uint8_t i = 0; senddata[i] != '\0'; i++) { //Seguimos mandando hasta que nos topamos con un caracter vacio
 4f2:	cf 5f       	subi	r28, 0xFF	; 255
 4f4:	f8 01       	movw	r30, r16
 4f6:	ec 0f       	add	r30, r28
 4f8:	f1 1d       	adc	r31, r1
 4fa:	80 81       	ld	r24, Z
 4fc:	81 11       	cpse	r24, r1
 4fe:	f7 cf       	rjmp	.-18     	; 0x4ee <writeString+0xc>
		writeUART(senddata[i]);
	}
}
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	08 95       	ret

00000508 <sendnumberasstring>:

void sendnumberasstring(char datain){
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	18 2f       	mov	r17, r24
	writeUART(datain/100 + 0x30); // desplegar cienes
 510:	c9 e2       	ldi	r28, 0x29	; 41
 512:	8c 9f       	mul	r24, r28
 514:	c1 2d       	mov	r28, r1
 516:	11 24       	eor	r1, r1
 518:	c2 95       	swap	r28
 51a:	cf 70       	andi	r28, 0x0F	; 15
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	8c 0f       	add	r24, r28
 520:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <writeUART>
	writeUART((datain % 100)/10 + 0x30); // desplegar decenas
 524:	d1 2f       	mov	r29, r17
 526:	84 e6       	ldi	r24, 0x64	; 100
 528:	c8 9f       	mul	r28, r24
 52a:	d0 19       	sub	r29, r0
 52c:	11 24       	eor	r1, r1
 52e:	cd ec       	ldi	r28, 0xCD	; 205
 530:	dc 9f       	mul	r29, r28
 532:	c1 2d       	mov	r28, r1
 534:	11 24       	eor	r1, r1
 536:	c6 95       	lsr	r28
 538:	c6 95       	lsr	r28
 53a:	c6 95       	lsr	r28
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	8c 0f       	add	r24, r28
 540:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <writeUART>
	writeUART((datain % 100) % 10 + 0x30); //desplegar unidades
 544:	cc 0f       	add	r28, r28
 546:	8c 2f       	mov	r24, r28
 548:	88 0f       	add	r24, r24
 54a:	88 0f       	add	r24, r24
 54c:	c8 0f       	add	r28, r24
 54e:	8d 2f       	mov	r24, r29
 550:	8c 1b       	sub	r24, r28
 552:	80 5d       	subi	r24, 0xD0	; 208
 554:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <writeUART>
	writeUART(10); //newline
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <writeUART>
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	08 95       	ret

00000566 <main>:
	
	sei();
}

int main(void)
{
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 d0       	rcall	.+0      	; 0x56c <main+0x6>
 56c:	00 d0       	rcall	.+0      	; 0x56e <main+0x8>
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
	setup();
 572:	0e 94 25 02 	call	0x44a	; 0x44a <setup>
	while (1) //Ejecutamos los ADCs de los 3 channels
	{
		
		//Bloque principal
		
		if (!eepromactive) {//Si el eeprom esta desactivado revisamos datos del ADC
 576:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <eepromactive>
 57a:	81 11       	cpse	r24, r1
 57c:	80 c0       	rjmp	.+256    	; 0x67e <main+0x118>
 57e:	04 e0       	ldi	r16, 0x04	; 4
 580:	10 e0       	ldi	r17, 0x00	; 0
 582:	10 c0       	rjmp	.+32     	; 0x5a4 <main+0x3e>
		for (int i = 4; i < 8; i++) {
		ADCChannel = i; //iniciamos el ADC convirtiendo el canal 4
 584:	00 93 1b 01 	sts	0x011B, r16	; 0x80011b <ADCChannel>
		convertADC(i);
 588:	80 2f       	mov	r24, r16
 58a:	0e 94 6b 00 	call	0xd6	; 0xd6 <convertADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	2f eb       	ldi	r18, 0xBF	; 191
 590:	84 ed       	ldi	r24, 0xD4	; 212
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	21 50       	subi	r18, 0x01	; 1
 596:	80 40       	sbci	r24, 0x00	; 0
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <main+0x2e>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0x38>
 59e:	00 00       	nop
	{
		
		//Bloque principal
		
		if (!eepromactive) {//Si el eeprom esta desactivado revisamos datos del ADC
		for (int i = 4; i < 8; i++) {
 5a0:	0f 5f       	subi	r16, 0xFF	; 255
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	08 30       	cpi	r16, 0x08	; 8
 5a6:	11 05       	cpc	r17, r1
 5a8:	6c f3       	brlt	.-38     	; 0x584 <main+0x1e>
		ADCChannel = i; //iniciamos el ADC convirtiendo el canal 4
		convertADC(i);
		_delay_ms(300);
		}
		
		if (senddatatimer == 0) {
 5aa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <senddatatimer>
 5ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <senddatatimer+0x1>
 5b2:	00 97       	sbiw	r24, 0x00	; 0
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <main+0x52>
 5b6:	5d c0       	rjmp	.+186    	; 0x672 <main+0x10c>
		//Mandar valor base
		uint16_t angleresult1 = ADCResult1 * 6 / 17; //0-255 -> 0-90
 5b8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ADCResult1>
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	9c 01       	movw	r18, r24
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	82 0f       	add	r24, r18
 5c6:	93 1f       	adc	r25, r19
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	01 e1       	ldi	r16, 0x11	; 17
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	b8 01       	movw	r22, r16
 5d2:	0e 94 a3 04 	call	0x946	; 0x946 <__divmodhi4>
 5d6:	f6 2e       	mov	r15, r22
		writeString(basestring);
 5d8:	85 e1       	ldi	r24, 0x15	; 21
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeString>
		sendnumberasstring(angleresult1);
 5e0:	8f 2d       	mov	r24, r15
 5e2:	0e 94 84 02 	call	0x508	; 0x508 <sendnumberasstring>
		
		//Mandar valor codo
		uint16_t angleresult2 = ADCResult2 * 6/17; //0-255 -> 0-90
 5e6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ADCResult2>
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9c 01       	movw	r18, r24
 5ee:	22 0f       	add	r18, r18
 5f0:	33 1f       	adc	r19, r19
 5f2:	82 0f       	add	r24, r18
 5f4:	93 1f       	adc	r25, r19
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	b8 01       	movw	r22, r16
 5fc:	0e 94 a3 04 	call	0x946	; 0x946 <__divmodhi4>
 600:	f6 2e       	mov	r15, r22
		writeString(codostring);
 602:	87 e0       	ldi	r24, 0x07	; 7
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeString>
		sendnumberasstring(angleresult2);
 60a:	8f 2d       	mov	r24, r15
 60c:	0e 94 84 02 	call	0x508	; 0x508 <sendnumberasstring>
		
		//Mandar valor hombro
		uint16_t angleresult3 = ADCResult3 * 4/17 + 60; //0-255 -> 60-120
 610:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ADCResult3>
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	b8 01       	movw	r22, r16
 620:	0e 94 a3 04 	call	0x946	; 0x946 <__divmodhi4>
 624:	7b 01       	movw	r14, r22
 626:	2c e3       	ldi	r18, 0x3C	; 60
 628:	e2 0e       	add	r14, r18
 62a:	f1 1c       	adc	r15, r1
		writeString(hombrostring);
 62c:	8d e0       	ldi	r24, 0x0D	; 13
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeString>
		sendnumberasstring(angleresult3);
 634:	8e 2d       	mov	r24, r14
 636:	0e 94 84 02 	call	0x508	; 0x508 <sendnumberasstring>
		
		//Mandar valor pinza
		uint16_t angleresult4 = ADCResult4 * 5/17; //0-255 -> 0-75
 63a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	9c 01       	movw	r18, r24
 642:	22 0f       	add	r18, r18
 644:	33 1f       	adc	r19, r19
 646:	22 0f       	add	r18, r18
 648:	33 1f       	adc	r19, r19
 64a:	82 0f       	add	r24, r18
 64c:	93 1f       	adc	r25, r19
 64e:	b8 01       	movw	r22, r16
 650:	0e 94 a3 04 	call	0x946	; 0x946 <__divmodhi4>
 654:	16 2f       	mov	r17, r22
		writeString(pinzastring);
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeString>
		sendnumberasstring(angleresult4);
 65e:	81 2f       	mov	r24, r17
 660:	0e 94 84 02 	call	0x508	; 0x508 <sendnumberasstring>
		
		senddatatimer = sendatatimerrestart;
 664:	88 e0       	ldi	r24, 0x08	; 8
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <senddatatimer+0x1>
 66c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <senddatatimer>
 670:	82 cf       	rjmp	.-252    	; 0x576 <main+0x10>
		}
		else {senddatatimer--;}
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <senddatatimer+0x1>
 678:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <senddatatimer>
 67c:	7c cf       	rjmp	.-264    	; 0x576 <main+0x10>
		
		}
		else if (eepromactive) { //Si el eeprom esta activado 
 67e:	88 23       	and	r24, r24
 680:	09 f4       	brne	.+2      	; 0x684 <main+0x11e>
 682:	79 cf       	rjmp	.-270    	; 0x576 <main+0x10>
			PORTD |= (1<<PORTD7);
 684:	8b b1       	in	r24, 0x0b	; 11
 686:	80 68       	ori	r24, 0x80	; 128
 688:	8b b9       	out	0x0b, r24	; 11
			uint8_t eepromdata[4];
			uint8_t eepromaddress = eepromselect * 4;
 68a:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <eepromselect>
 68e:	66 0f       	add	r22, r22
 690:	66 0f       	add	r22, r22
			
			eeprom_read_block(eepromdata, eepromaddress, 4);
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	44 e0       	ldi	r20, 0x04	; 4
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <eeprom_read_block>
			moveServos(eepromdata[0], eepromdata[1], eepromdata[2], eepromdata[3]);
 6a0:	2c 81       	ldd	r18, Y+4	; 0x04
 6a2:	4b 81       	ldd	r20, Y+3	; 0x03
 6a4:	6a 81       	ldd	r22, Y+2	; 0x02
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <moveServos>
 6b4:	60 cf       	rjmp	.-320    	; 0x576 <main+0x10>

000006b6 <initPWM0FastA>:
void updateDutyCycle1A(uint16_t duty) {
	OCR1A = duty;
}

void updateDutyCycle1B(uint16_t duty) {
	OCR1B = duty;
 6b6:	9a b1       	in	r25, 0x0a	; 10
 6b8:	90 64       	ori	r25, 0x40	; 64
 6ba:	9a b9       	out	0x0a, r25	; 10
 6bc:	88 23       	and	r24, r24
 6be:	11 f0       	breq	.+4      	; 0x6c4 <initPWM0FastA+0xe>
 6c0:	14 bc       	out	0x24, r1	; 36
 6c2:	15 bc       	out	0x25, r1	; 37
 6c4:	84 b5       	in	r24, 0x24	; 36
 6c6:	80 68       	ori	r24, 0x80	; 128
 6c8:	84 bd       	out	0x24, r24	; 36
 6ca:	66 23       	and	r22, r22
 6cc:	19 f0       	breq	.+6      	; 0x6d4 <initPWM0FastA+0x1e>
 6ce:	84 b5       	in	r24, 0x24	; 36
 6d0:	80 64       	ori	r24, 0x40	; 64
 6d2:	84 bd       	out	0x24, r24	; 36
 6d4:	84 b5       	in	r24, 0x24	; 36
 6d6:	83 60       	ori	r24, 0x03	; 3
 6d8:	84 bd       	out	0x24, r24	; 36
 6da:	40 34       	cpi	r20, 0x40	; 64
 6dc:	51 05       	cpc	r21, r1
 6de:	c1 f0       	breq	.+48     	; 0x710 <initPWM0FastA+0x5a>
 6e0:	38 f4       	brcc	.+14     	; 0x6f0 <initPWM0FastA+0x3a>
 6e2:	41 30       	cpi	r20, 0x01	; 1
 6e4:	51 05       	cpc	r21, r1
 6e6:	61 f0       	breq	.+24     	; 0x700 <initPWM0FastA+0x4a>
 6e8:	48 30       	cpi	r20, 0x08	; 8
 6ea:	51 05       	cpc	r21, r1
 6ec:	69 f0       	breq	.+26     	; 0x708 <initPWM0FastA+0x52>
 6ee:	1c c0       	rjmp	.+56     	; 0x728 <initPWM0FastA+0x72>
 6f0:	41 15       	cp	r20, r1
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	58 07       	cpc	r21, r24
 6f6:	81 f0       	breq	.+32     	; 0x718 <initPWM0FastA+0x62>
 6f8:	41 15       	cp	r20, r1
 6fa:	54 40       	sbci	r21, 0x04	; 4
 6fc:	89 f0       	breq	.+34     	; 0x720 <initPWM0FastA+0x6a>
 6fe:	14 c0       	rjmp	.+40     	; 0x728 <initPWM0FastA+0x72>
 700:	85 b5       	in	r24, 0x25	; 37
 702:	81 60       	ori	r24, 0x01	; 1
 704:	85 bd       	out	0x25, r24	; 37
 706:	08 95       	ret
 708:	85 b5       	in	r24, 0x25	; 37
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	85 bd       	out	0x25, r24	; 37
 70e:	08 95       	ret
 710:	85 b5       	in	r24, 0x25	; 37
 712:	83 60       	ori	r24, 0x03	; 3
 714:	85 bd       	out	0x25, r24	; 37
 716:	08 95       	ret
 718:	85 b5       	in	r24, 0x25	; 37
 71a:	84 60       	ori	r24, 0x04	; 4
 71c:	85 bd       	out	0x25, r24	; 37
 71e:	08 95       	ret
 720:	85 b5       	in	r24, 0x25	; 37
 722:	85 60       	ori	r24, 0x05	; 5
 724:	85 bd       	out	0x25, r24	; 37
 726:	08 95       	ret
 728:	85 b5       	in	r24, 0x25	; 37
 72a:	85 60       	ori	r24, 0x05	; 5
 72c:	85 bd       	out	0x25, r24	; 37
 72e:	08 95       	ret

00000730 <initPWM0FastB>:
 730:	9a b1       	in	r25, 0x0a	; 10
 732:	90 62       	ori	r25, 0x20	; 32
 734:	9a b9       	out	0x0a, r25	; 10
 736:	88 23       	and	r24, r24
 738:	11 f0       	breq	.+4      	; 0x73e <initPWM0FastB+0xe>
 73a:	14 bc       	out	0x24, r1	; 36
 73c:	15 bc       	out	0x25, r1	; 37
 73e:	84 b5       	in	r24, 0x24	; 36
 740:	80 62       	ori	r24, 0x20	; 32
 742:	84 bd       	out	0x24, r24	; 36
 744:	66 23       	and	r22, r22
 746:	19 f0       	breq	.+6      	; 0x74e <initPWM0FastB+0x1e>
 748:	84 b5       	in	r24, 0x24	; 36
 74a:	80 61       	ori	r24, 0x10	; 16
 74c:	84 bd       	out	0x24, r24	; 36
 74e:	84 b5       	in	r24, 0x24	; 36
 750:	83 60       	ori	r24, 0x03	; 3
 752:	84 bd       	out	0x24, r24	; 36
 754:	40 34       	cpi	r20, 0x40	; 64
 756:	51 05       	cpc	r21, r1
 758:	c1 f0       	breq	.+48     	; 0x78a <initPWM0FastB+0x5a>
 75a:	38 f4       	brcc	.+14     	; 0x76a <initPWM0FastB+0x3a>
 75c:	41 30       	cpi	r20, 0x01	; 1
 75e:	51 05       	cpc	r21, r1
 760:	61 f0       	breq	.+24     	; 0x77a <initPWM0FastB+0x4a>
 762:	48 30       	cpi	r20, 0x08	; 8
 764:	51 05       	cpc	r21, r1
 766:	69 f0       	breq	.+26     	; 0x782 <initPWM0FastB+0x52>
 768:	1c c0       	rjmp	.+56     	; 0x7a2 <initPWM0FastB+0x72>
 76a:	41 15       	cp	r20, r1
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	58 07       	cpc	r21, r24
 770:	81 f0       	breq	.+32     	; 0x792 <initPWM0FastB+0x62>
 772:	41 15       	cp	r20, r1
 774:	54 40       	sbci	r21, 0x04	; 4
 776:	89 f0       	breq	.+34     	; 0x79a <initPWM0FastB+0x6a>
 778:	14 c0       	rjmp	.+40     	; 0x7a2 <initPWM0FastB+0x72>
 77a:	85 b5       	in	r24, 0x25	; 37
 77c:	81 60       	ori	r24, 0x01	; 1
 77e:	85 bd       	out	0x25, r24	; 37
 780:	08 95       	ret
 782:	85 b5       	in	r24, 0x25	; 37
 784:	82 60       	ori	r24, 0x02	; 2
 786:	85 bd       	out	0x25, r24	; 37
 788:	08 95       	ret
 78a:	85 b5       	in	r24, 0x25	; 37
 78c:	83 60       	ori	r24, 0x03	; 3
 78e:	85 bd       	out	0x25, r24	; 37
 790:	08 95       	ret
 792:	85 b5       	in	r24, 0x25	; 37
 794:	84 60       	ori	r24, 0x04	; 4
 796:	85 bd       	out	0x25, r24	; 37
 798:	08 95       	ret
 79a:	85 b5       	in	r24, 0x25	; 37
 79c:	85 60       	ori	r24, 0x05	; 5
 79e:	85 bd       	out	0x25, r24	; 37
 7a0:	08 95       	ret
 7a2:	85 b5       	in	r24, 0x25	; 37
 7a4:	85 60       	ori	r24, 0x05	; 5
 7a6:	85 bd       	out	0x25, r24	; 37
 7a8:	08 95       	ret

000007aa <initPWM2FastA>:
 7aa:	94 b1       	in	r25, 0x04	; 4
 7ac:	98 60       	ori	r25, 0x08	; 8
 7ae:	94 b9       	out	0x04, r25	; 4
 7b0:	88 23       	and	r24, r24
 7b2:	21 f0       	breq	.+8      	; 0x7bc <initPWM2FastA+0x12>
 7b4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 7b8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 7bc:	e0 eb       	ldi	r30, 0xB0	; 176
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	80 68       	ori	r24, 0x80	; 128
 7c4:	80 83       	st	Z, r24
 7c6:	66 23       	and	r22, r22
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <initPWM2FastA+0x26>
 7ca:	80 81       	ld	r24, Z
 7cc:	80 64       	ori	r24, 0x40	; 64
 7ce:	80 83       	st	Z, r24
 7d0:	e0 eb       	ldi	r30, 0xB0	; 176
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	83 60       	ori	r24, 0x03	; 3
 7d8:	80 83       	st	Z, r24
 7da:	40 34       	cpi	r20, 0x40	; 64
 7dc:	51 05       	cpc	r21, r1
 7de:	49 f1       	breq	.+82     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <initPWM2FastA+0x4c>
 7e2:	48 30       	cpi	r20, 0x08	; 8
 7e4:	51 05       	cpc	r21, r1
 7e6:	c9 f0       	breq	.+50     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7e8:	40 32       	cpi	r20, 0x20	; 32
 7ea:	51 05       	cpc	r21, r1
 7ec:	e1 f0       	breq	.+56     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7ee:	41 30       	cpi	r20, 0x01	; 1
 7f0:	51 05       	cpc	r21, r1
 7f2:	b9 f5       	brne	.+110    	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f6:	41 15       	cp	r20, r1
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	58 07       	cpc	r21, r24
 7fc:	31 f1       	breq	.+76     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7fe:	41 15       	cp	r20, r1
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	58 07       	cpc	r21, r24
 804:	41 f1       	breq	.+80     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 806:	40 38       	cpi	r20, 0x80	; 128
 808:	51 05       	cpc	r21, r1
 80a:	59 f5       	brne	.+86     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 80c:	18 c0       	rjmp	.+48     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 80e:	e1 eb       	ldi	r30, 0xB1	; 177
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	81 60       	ori	r24, 0x01	; 1
 816:	80 83       	st	Z, r24
 818:	08 95       	ret
 81a:	e1 eb       	ldi	r30, 0xB1	; 177
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	82 60       	ori	r24, 0x02	; 2
 822:	80 83       	st	Z, r24
 824:	08 95       	ret
 826:	e1 eb       	ldi	r30, 0xB1	; 177
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	83 60       	ori	r24, 0x03	; 3
 82e:	80 83       	st	Z, r24
 830:	08 95       	ret
 832:	e1 eb       	ldi	r30, 0xB1	; 177
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	84 60       	ori	r24, 0x04	; 4
 83a:	80 83       	st	Z, r24
 83c:	08 95       	ret
 83e:	e1 eb       	ldi	r30, 0xB1	; 177
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	85 60       	ori	r24, 0x05	; 5
 846:	80 83       	st	Z, r24
 848:	08 95       	ret
 84a:	e1 eb       	ldi	r30, 0xB1	; 177
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	86 60       	ori	r24, 0x06	; 6
 852:	80 83       	st	Z, r24
 854:	08 95       	ret
 856:	e1 eb       	ldi	r30, 0xB1	; 177
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	87 60       	ori	r24, 0x07	; 7
 85e:	80 83       	st	Z, r24
 860:	08 95       	ret
 862:	e1 eb       	ldi	r30, 0xB1	; 177
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	87 60       	ori	r24, 0x07	; 7
 86a:	80 83       	st	Z, r24
 86c:	08 95       	ret

0000086e <initPWM2FastB>:
 86e:	9a b1       	in	r25, 0x0a	; 10
 870:	98 60       	ori	r25, 0x08	; 8
 872:	9a b9       	out	0x0a, r25	; 10
 874:	88 23       	and	r24, r24
 876:	21 f0       	breq	.+8      	; 0x880 <initPWM2FastB+0x12>
 878:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 87c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 880:	e0 eb       	ldi	r30, 0xB0	; 176
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	80 62       	ori	r24, 0x20	; 32
 888:	80 83       	st	Z, r24
 88a:	66 23       	and	r22, r22
 88c:	19 f0       	breq	.+6      	; 0x894 <initPWM2FastB+0x26>
 88e:	80 81       	ld	r24, Z
 890:	80 61       	ori	r24, 0x10	; 16
 892:	80 83       	st	Z, r24
 894:	e0 eb       	ldi	r30, 0xB0	; 176
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	83 60       	ori	r24, 0x03	; 3
 89c:	80 83       	st	Z, r24
 89e:	40 34       	cpi	r20, 0x40	; 64
 8a0:	51 05       	cpc	r21, r1
 8a2:	49 f1       	breq	.+82     	; 0x8f6 <initPWM2FastB+0x88>
 8a4:	50 f4       	brcc	.+20     	; 0x8ba <initPWM2FastB+0x4c>
 8a6:	48 30       	cpi	r20, 0x08	; 8
 8a8:	51 05       	cpc	r21, r1
 8aa:	c9 f0       	breq	.+50     	; 0x8de <initPWM2FastB+0x70>
 8ac:	40 32       	cpi	r20, 0x20	; 32
 8ae:	51 05       	cpc	r21, r1
 8b0:	e1 f0       	breq	.+56     	; 0x8ea <initPWM2FastB+0x7c>
 8b2:	41 30       	cpi	r20, 0x01	; 1
 8b4:	51 05       	cpc	r21, r1
 8b6:	b9 f5       	brne	.+110    	; 0x926 <__stack+0x27>
 8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <initPWM2FastB+0x64>
 8ba:	41 15       	cp	r20, r1
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	58 07       	cpc	r21, r24
 8c0:	31 f1       	breq	.+76     	; 0x90e <__stack+0xf>
 8c2:	41 15       	cp	r20, r1
 8c4:	84 e0       	ldi	r24, 0x04	; 4
 8c6:	58 07       	cpc	r21, r24
 8c8:	41 f1       	breq	.+80     	; 0x91a <__stack+0x1b>
 8ca:	40 38       	cpi	r20, 0x80	; 128
 8cc:	51 05       	cpc	r21, r1
 8ce:	59 f5       	brne	.+86     	; 0x926 <__stack+0x27>
 8d0:	18 c0       	rjmp	.+48     	; 0x902 <__stack+0x3>
 8d2:	e1 eb       	ldi	r30, 0xB1	; 177
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	80 83       	st	Z, r24
 8dc:	08 95       	ret
 8de:	e1 eb       	ldi	r30, 0xB1	; 177
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	82 60       	ori	r24, 0x02	; 2
 8e6:	80 83       	st	Z, r24
 8e8:	08 95       	ret
 8ea:	e1 eb       	ldi	r30, 0xB1	; 177
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	83 60       	ori	r24, 0x03	; 3
 8f2:	80 83       	st	Z, r24
 8f4:	08 95       	ret
 8f6:	e1 eb       	ldi	r30, 0xB1	; 177
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	84 60       	ori	r24, 0x04	; 4
 8fe:	80 83       	st	Z, r24
 900:	08 95       	ret
 902:	e1 eb       	ldi	r30, 0xB1	; 177
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	85 60       	ori	r24, 0x05	; 5
 90a:	80 83       	st	Z, r24
 90c:	08 95       	ret
 90e:	e1 eb       	ldi	r30, 0xB1	; 177
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	86 60       	ori	r24, 0x06	; 6
 916:	80 83       	st	Z, r24
 918:	08 95       	ret
 91a:	e1 eb       	ldi	r30, 0xB1	; 177
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	87 60       	ori	r24, 0x07	; 7
 922:	80 83       	st	Z, r24
 924:	08 95       	ret
 926:	e1 eb       	ldi	r30, 0xB1	; 177
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	87 60       	ori	r24, 0x07	; 7
 92e:	80 83       	st	Z, r24
 930:	08 95       	ret

00000932 <updateDutyCycle0A>:
 932:	87 bd       	out	0x27, r24	; 39
 934:	08 95       	ret

00000936 <updateDutyCycle0B>:
 936:	88 bd       	out	0x28, r24	; 40
 938:	08 95       	ret

0000093a <updateDutyCycle2A>:
}


void updateDutyCycle2A(uint8_t duty) {
	OCR2A = duty;
 93a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 93e:	08 95       	ret

00000940 <updateDutyCycle2B>:
}

void updateDutyCycle2B(uint8_t duty) {
	OCR2B = duty;
 940:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 944:	08 95       	ret

00000946 <__divmodhi4>:
 946:	97 fb       	bst	r25, 7
 948:	07 2e       	mov	r0, r23
 94a:	16 f4       	brtc	.+4      	; 0x950 <__divmodhi4+0xa>
 94c:	00 94       	com	r0
 94e:	07 d0       	rcall	.+14     	; 0x95e <__divmodhi4_neg1>
 950:	77 fd       	sbrc	r23, 7
 952:	09 d0       	rcall	.+18     	; 0x966 <__divmodhi4_neg2>
 954:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodhi4>
 958:	07 fc       	sbrc	r0, 7
 95a:	05 d0       	rcall	.+10     	; 0x966 <__divmodhi4_neg2>
 95c:	3e f4       	brtc	.+14     	; 0x96c <__divmodhi4_exit>

0000095e <__divmodhi4_neg1>:
 95e:	90 95       	com	r25
 960:	81 95       	neg	r24
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	08 95       	ret

00000966 <__divmodhi4_neg2>:
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255

0000096c <__divmodhi4_exit>:
 96c:	08 95       	ret

0000096e <__umulhisi3>:
 96e:	a2 9f       	mul	r26, r18
 970:	b0 01       	movw	r22, r0
 972:	b3 9f       	mul	r27, r19
 974:	c0 01       	movw	r24, r0
 976:	a3 9f       	mul	r26, r19
 978:	70 0d       	add	r23, r0
 97a:	81 1d       	adc	r24, r1
 97c:	11 24       	eor	r1, r1
 97e:	91 1d       	adc	r25, r1
 980:	b2 9f       	mul	r27, r18
 982:	70 0d       	add	r23, r0
 984:	81 1d       	adc	r24, r1
 986:	11 24       	eor	r1, r1
 988:	91 1d       	adc	r25, r1
 98a:	08 95       	ret

0000098c <__udivmodhi4>:
 98c:	aa 1b       	sub	r26, r26
 98e:	bb 1b       	sub	r27, r27
 990:	51 e1       	ldi	r21, 0x11	; 17
 992:	07 c0       	rjmp	.+14     	; 0x9a2 <__udivmodhi4_ep>

00000994 <__udivmodhi4_loop>:
 994:	aa 1f       	adc	r26, r26
 996:	bb 1f       	adc	r27, r27
 998:	a6 17       	cp	r26, r22
 99a:	b7 07       	cpc	r27, r23
 99c:	10 f0       	brcs	.+4      	; 0x9a2 <__udivmodhi4_ep>
 99e:	a6 1b       	sub	r26, r22
 9a0:	b7 0b       	sbc	r27, r23

000009a2 <__udivmodhi4_ep>:
 9a2:	88 1f       	adc	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	5a 95       	dec	r21
 9a8:	a9 f7       	brne	.-22     	; 0x994 <__udivmodhi4_loop>
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	bc 01       	movw	r22, r24
 9b0:	cd 01       	movw	r24, r26
 9b2:	08 95       	ret

000009b4 <eeprom_read_block>:
 9b4:	dc 01       	movw	r26, r24
 9b6:	cb 01       	movw	r24, r22

000009b8 <eeprom_read_blraw>:
 9b8:	fc 01       	movw	r30, r24
 9ba:	f9 99       	sbic	0x1f, 1	; 31
 9bc:	fe cf       	rjmp	.-4      	; 0x9ba <eeprom_read_blraw+0x2>
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <eeprom_read_blraw+0x14>
 9c0:	f2 bd       	out	0x22, r31	; 34
 9c2:	e1 bd       	out	0x21, r30	; 33
 9c4:	f8 9a       	sbi	0x1f, 0	; 31
 9c6:	31 96       	adiw	r30, 0x01	; 1
 9c8:	00 b4       	in	r0, 0x20	; 32
 9ca:	0d 92       	st	X+, r0
 9cc:	41 50       	subi	r20, 0x01	; 1
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	b8 f7       	brcc	.-18     	; 0x9c0 <eeprom_read_blraw+0x8>
 9d2:	08 95       	ret

000009d4 <eeprom_write_block>:
 9d4:	dc 01       	movw	r26, r24
 9d6:	cb 01       	movw	r24, r22
 9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <eeprom_write_block+0xc>
 9da:	2d 91       	ld	r18, X+
 9dc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <eeprom_write_r18>
 9e0:	41 50       	subi	r20, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	d0 f7       	brcc	.-12     	; 0x9da <eeprom_write_block+0x6>
 9e6:	08 95       	ret

000009e8 <eeprom_write_byte>:
 9e8:	26 2f       	mov	r18, r22

000009ea <eeprom_write_r18>:
 9ea:	f9 99       	sbic	0x1f, 1	; 31
 9ec:	fe cf       	rjmp	.-4      	; 0x9ea <eeprom_write_r18>
 9ee:	1f ba       	out	0x1f, r1	; 31
 9f0:	92 bd       	out	0x22, r25	; 34
 9f2:	81 bd       	out	0x21, r24	; 33
 9f4:	20 bd       	out	0x20, r18	; 32
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	fa 9a       	sbi	0x1f, 2	; 31
 9fc:	f9 9a       	sbi	0x1f, 1	; 31
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>
